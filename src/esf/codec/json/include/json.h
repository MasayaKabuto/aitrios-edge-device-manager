/*
* SPDX-FileCopyrightText: 2024-2025 Sony Semiconductor Solutions Corporation
*
* SPDX-License-Identifier: Apache-2.0
*/

#ifndef ESF_CODEC_JSON_JSON_H_
#define ESF_CODEC_JSON_JSON_H_
#ifdef __cplusplus
extern "C" {
#endif

#include <inttypes.h>
#include <stdbool.h>
#include <stdint.h>

// This is an enumeration type representing JSON Type
typedef enum EsfJsonValueType {
  kEsfJsonValueTypeObject,   // JSON Type Object
  kEsfJsonValueTypeArray,    // JSON Type Array
  kEsfJsonValueTypeString,   // JSON Type String
  kEsfJsonValueTypeNumber,   // JSON Type Number
  kEsfJsonValueTypeBoolean,  // JSON Type Boolean
  kEsfJsonValueTypeNull,     // JSON Type Null
} EsfJsonValueType;

// This code defines an enumeration type for the result of executing an API.
typedef enum EsfJsonErrorCode {
  kEsfJsonSuccess,              // No errors.
  kEsfJsonInternalError,        // Internal error.
  kEsfJsonInvalidArgument,      // Argument error.
  kEsfJsonHandleError,          // Handle unacquired error.
  kEsfJsonValueTypeError,       // JSON Value Type error.
  kEsfJsonValueNotFound,        // JSON Value ID not found.
  kEsfJsonValueLimit,           // JSON Value ID excess error.
  kEsfJsonOutOfMemory,          // Memory allocation error.
  kEsfJsonParentAlreadyExists,  // Parent already exists error.
  kEsfJsonIndexExceed,          // Excess of index error.
  kEsfJsonValueDuplicated       // Duplicate EsfJsonValue error.
} EsfJsonErrorCode;

// Initial value of EsfJsonValue.
#define ESF_JSON_VALUE_INVALID ((EsfJsonValue) - 1)
// The maximum value of EsfJsonValue.
#define ESF_JSON_VALUE_MAX (1024)

// ID to manage JSON Value.
typedef int32_t EsfJsonValue;

// JSON Value and a struct to manage IDs.
typedef struct EsfJsonHandleImpl EsfJsonHandleImpl;

// Handle to manage JSON data.
typedef EsfJsonHandleImpl* EsfJsonHandle;

// Handle initialization macro.
#define ESF_JSON_HANDLE_INITIALIZER (NULL)

// func
// handle
//  """Gets the handle of JSON API.

// Allocates memory and returns the result to handle.

// Args:
//    handle (EsfJsonHandle*): JSON API Handle.
//      NULL is not acceptable.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonOutOfMemory: Memory allocation failure.
EsfJsonErrorCode EsfJsonOpen(EsfJsonHandle* handle);

// """Release the handle of JSON API.

// Release allocates memory.
// Resources tied to handle will also be released.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
EsfJsonErrorCode EsfJsonClose(EsfJsonHandle handle);

// json
//  """Converts JSON Value to a string.

// String the serialization target and return the result.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    value (EsfJsonValue): JSON Value ID.
//    str (const char**): Serialization target.
//      NULL is not acceptable.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonOutOfMemory: Memory allocation failure.
//    kEsfJsonValueNotFound: JSON Value not found.

// Note:
//    Strings can be released by calling EsfJsonSerializeFree.
//    Only the most recent string is retained.
//    Calling EsfJsonSerialize func again releases the previous string and must
//    not be referenced.
EsfJsonErrorCode EsfJsonSerialize(EsfJsonHandle handle, EsfJsonValue value,
                                  const char** str);

// """Releases the string generated by EsfJsonSerialize func.

// Releases the string generated by EsfJsonSerialize func.
// If no string is generated, does nothing and returns kEsfJsonSuccess.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonHandleError: Handle not yet acquired error.
EsfJsonErrorCode EsfJsonSerializeFree(EsfJsonHandle handle);

// """Converts a string to JSON Value.

// Converts to a string to be deserialized and returns the result.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    str (const char*): The string to be converted.
//      NULL is not acceptable.
//    value (EsfJsonValue*): JSON Value ID.
//      NULL is not acceptable.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonValueLimit: JSON Value ID excess error.
//    kEsfJsonOutOfMemory: Memory allocation failure.
EsfJsonErrorCode EsfJsonDeserialize(EsfJsonHandle handle, const char* str,
                                    EsfJsonValue* value);

// json object
//  """Create an empty JSON object.

// Creates an empty object and returns the result.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    value (EsfJsonValue*): JSON Value ID.
//      NULL is not acceptable.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonValueLimit: JSON Value ID excess error.
//    kEsfJsonOutOfMemory: Memory allocation failure.
EsfJsonErrorCode EsfJsonObjectInit(EsfJsonHandle handle, EsfJsonValue* value);

// """Retrieves JSON Value from JSON object by specifying key

// Retrieves JSON Value from JSON object by specifying key and returns the
// result.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    parent (EsfJsonValue): Object's JSON Value ID.
//    key (const char*): Key to search from JSON object.
//    value (EsfJsonValue*): JSON Value ID.
//      NULL is not acceptable.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonValueLimit: JSON Value ID excess error.
//    kEsfJsonValueTypeError: JSON type error.
//    kEsfJsonValueNotFound: JSON Value not found.
//    kEsfJsonOutOfMemory: Memory allocation failure.
EsfJsonErrorCode EsfJsonObjectGet(EsfJsonHandle handle, EsfJsonValue parent,
                                  const char* key, EsfJsonValue* value);

// """Set JSON Value to JSON object by specifying key.

// Set JSON Value to JSON object by specifying key.
// Returns an error if a new JSON Value is already associated.
// If Key already exists, replace it with a new JSON Value and release old JSON
// Value

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    parent (EsfJsonValue): Object's JSON Value ID.
//    key (const char*): Key to search from JSON object.
//      NULL is not acceptable.
//    value (EsfJsonValue): JSON Value ID.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonInternalError:  Internal error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonOutOfMemory: Memory allocation failure.
//    kEsfJsonValueLimit: JSON Value ID excess error.
//    kEsfJsonValueNotFound: JSON Value not found.
//    kEsfJsonParentAlreadyExists: Parent already exists error.
EsfJsonErrorCode EsfJsonObjectSet(EsfJsonHandle handle, EsfJsonValue parent,
                                  const char* key, EsfJsonValue value);

// """Deletes JSON Value fromJSON object by specifying key.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    parent (EsfJsonValue): Object's JSON Value ID.
//    key (const char*): Key to search from JSON object.
//      NULL is not acceptable.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonInternalError:  Internal error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonValueTypeError: JSON type error.
//    kEsfJsonValueNotFound: JSON Value not found.
EsfJsonErrorCode EsfJsonObjectRemove(EsfJsonHandle handle, EsfJsonValue parent,
                                     const char* key);

// """Initialize JSON Value to empty JSON object.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    parent (EsfJsonValue): Object's JSON Value ID.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonInternalError:  Internal error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonValueNotFound: JSON Value not found.
//    kEsfJsonOutOfMemory: Memory allocation failure.
EsfJsonErrorCode EsfJsonObjectClear(EsfJsonHandle handle, EsfJsonValue value);

// """Obtains the number of elements in the JSON object.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    parent (EsfJsonValue*): Object's JSON Value ID.

// Returns:
//    Failure:Returns -1 in case of failure.
//    Success: Number of elements retrieved.
int32_t EsfJsonObjectCount(EsfJsonHandle handle, EsfJsonValue parent);

// """Get Key and Value from JSON object by specifying the index.

// Get Key and Value from JSON object by specifying the index.
// The survival time of a Key is equal to the survival time of a Value.
// Key must not be referenced after JSON object release or after Value deletion.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    parent (EsfJsonValue): Object's JSON Value ID.
//    count (int32_t*): The number of elements in the structure.
//      NULL is not acceptable.
//    key (const char**): Key acquired.
//      NULL is not acceptable.
//    value (EsfJsonValue*): JSON Value ID.
//      NULL is not acceptable.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonValueTypeError: JSON type error.
//    kEsfJsonIndexExceed: Excess of elements error.
//    kEsfJsonValueNotFound: JSON Value not found.
//    kEsfJsonOutOfMemory: Memory allocation failure.
//    kEsfJsonValueLimit: JSON Value ID excess error.
EsfJsonErrorCode EsfJsonObjectGetAt(EsfJsonHandle handle, EsfJsonValue parent,
                                    int32_t index, const char** key,
                                    EsfJsonValue* value);

// json array
//  """Create an empty JSON array.

// Creates an empty JSON array and returns the result.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    value (EsfJsonValue*): JSON Value ID.
//      NULL is not acceptable.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonValueLimit: JSON Value ID excess error.
//    kEsfJsonOutOfMemory: Memory allocation failure.
EsfJsonErrorCode EsfJsonArrayInit(EsfJsonHandle handle, EsfJsonValue* value);

// """Retrieves JSON Value from JSON array by specifying index

// Retrieves JSON Value from JSON array by specifying index and returns the
// result.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    parent (EsfJsonValue): Array's JSON Value ID.
//    index (int32_t index): The index needed to search for elements in the JSON
//    array. value (EsfJsonValue*): JSON Value ID.
//      NULL is not acceptable.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonValueLimit: JSON Value ID excess error.
//    kEsfJsonValueTypeError: JSON type error.
//    kEsfJsonIndexExceed: Excess of elements error.
//    kEsfJsonValueNotFound: JSON Value not found.
//    kEsfJsonOutOfMemory: Memory allocation failure.
EsfJsonErrorCode EsfJsonArrayGet(EsfJsonHandle handle, EsfJsonValue parent,
                                 int32_t index, EsfJsonValue* value);

// """Add JSON Value at the end of JSON array.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    parent (EsfJsonValue): Array's JSON Value ID.
//    value (EsfJsonValue): JSON Value ID.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonOutOfMemory: Memory allocation failure.
//    kEsfJsonValueTypeError: JSON type error.
//    kEsfJsonParentAlreadyExists: Parent already exists error.
//    kEsfJsonValueNotFound: JSON Value not found.
EsfJsonErrorCode EsfJsonArrayAppend(EsfJsonHandle handle, EsfJsonValue parent,
                                    EsfJsonValue value);

// """"Replace JSON array in JSON Value with an index.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    parent (EsfJsonValue): Array's JSON Value ID.
//    index (int32_t index): The index needed to search for elements in the JSON
//    array. value (EsfJsonValue): JSON Value ID.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonInternalError:  Internal error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonValueTypeError: JSON type error.
//    kEsfJsonParentAlreadyExists: Parent already exists error.
//    kEsfJsonIndexExceed: Excess of elements error.
//    kEsfJsonValueNotFound: JSON Value not found.
EsfJsonErrorCode EsfJsonArrayReplace(EsfJsonHandle handle, EsfJsonValue parent,
                                     int32_t index, EsfJsonValue value);

// """"Delete JSON Value from JSON array by specifying the index.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    parent (EsfJsonValue): Array's JSON Value ID.
//    index (int32_t index): The index needed to search for elements in the JSON
//    array.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonInternalError:  Internal error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonValueTypeError: JSON type error.
//    kEsfJsonIndexExceed: Excess of elements error.
//    kEsfJsonValueNotFound: JSON Value not found.
EsfJsonErrorCode EsfJsonArrayRemove(EsfJsonHandle handle, EsfJsonValue parent,
                                    int32_t index);

// """"Initialize JSON Value to empty JSON array.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    value (EsfJsonValue): JSON Value ID.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonInternalError:  Internal error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonValueNotFound: JSON Value not found.
EsfJsonErrorCode EsfJsonArrayClear(EsfJsonHandle handle, EsfJsonValue value);

// """"Get the number of elements in JSON array.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    value (EsfJsonValue): JSON Value ID.

// Returns:
//    Failure:Returns -1 in case of failure.
//    Success: Number of elements retrieved.
int32_t EsfJsonArrayCount(EsfJsonHandle handle, EsfJsonValue parent);

// json string
//  """Create JSON string.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    str (const char*): String to be set.
//      NULL is not acceptable.
//    value (EsfJsonValue*): JSON Value ID.
//      NULL is not acceptable.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonValueLimit: JSON Value ID excess error.
//    kEsfJsonOutOfMemory: Memory allocation failure.
EsfJsonErrorCode EsfJsonStringInit(EsfJsonHandle handle, const char* str,
                                   EsfJsonValue* value);

// """Get a string from JSON string.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    value (EsfJsonValue): JSON Value ID.
//    str (const char** str): The acquired string.
//      NULL is not acceptable.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonValueTypeError: JSON type error.
//    kEsfJsonValueNotFound: JSON Value not found.
EsfJsonErrorCode EsfJsonStringGet(EsfJsonHandle handle, EsfJsonValue value,
                                  const char** str);

// """"Set a string to JSON Value

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    value (EsfJsonValue): JSON Value ID.
//    str (const char* str): String to be set.
//      NULL is not acceptable.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonInternalError:  Internal error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonOutOfMemory: Memory allocation failure.
//    kEsfJsonValueNotFound: JSON Value not found.
EsfJsonErrorCode EsfJsonStringSet(EsfJsonHandle handle, EsfJsonValue value,
                                  const char* str);

// json number
//  """Create JSON number(integer number).

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    num (int32_t): Number to be set.
//    value (EsfJsonValue*): JSON Value ID.
//      NULL is not acceptable.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonValueLimit: JSON Value ID excess error.
//    kEsfJsonOutOfMemory: Memory allocation failure.
EsfJsonErrorCode EsfJsonIntegerInit(EsfJsonHandle handle, int32_t num,
                                    EsfJsonValue* value);

// """Create JSON number(real number).

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    num (double): Number to be set.
//    value (EsfJsonValue*): JSON Value ID.
//      NULL is not acceptable.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonValueLimit: JSON Value ID excess error.
//    kEsfJsonOutOfMemory: Memory allocation failure.
EsfJsonErrorCode EsfJsonRealInit(EsfJsonHandle handle, double num,
                                 EsfJsonValue* value);

// """Get integer value from JSON number.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    value (EsfJsonValue): JSON Value ID.
//    num (int32_t*): Retrieved integer value.
//      NULL is not acceptable.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonValueTypeError: JSON type error.
//    kEsfJsonValueNotFound: JSON Value not found.
EsfJsonErrorCode EsfJsonIntegerGet(EsfJsonHandle handle, EsfJsonValue value,
                                   int32_t* num);

// """Get real value from JSON number.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    value (EsfJsonValue): JSON Value ID.
//    num (double*): Retrieved real value.
//      NULL is not acceptable.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonValueTypeError: JSON type error.
//    kEsfJsonValueNotFound: JSON Value not found.
EsfJsonErrorCode EsfJsonRealGet(EsfJsonHandle handle, EsfJsonValue value,
                                double* num);

// """Set an integer value to JSON value.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    value (EsfJsonValue): JSON Value ID.
//    num (int32_t): Integer value to be set.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonInternalError:  Internal error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonOutOfMemory: Memory allocation failure.
//    kEsfJsonValueNotFound: JSON Value not found.
EsfJsonErrorCode EsfJsonIntegerSet(EsfJsonHandle handle, EsfJsonValue value,
                                   int32_t num);

// """Set an real value to JSON value.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    value (EsfJsonValue): JSON Value ID.
//    num (int32_t): Real value to be set.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonInternalError:  Internal error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonOutOfMemory: Memory allocation failure.
//    kEsfJsonValueNotFound: JSON Value not found.
EsfJsonErrorCode EsfJsonRealSet(EsfJsonHandle handle, EsfJsonValue value,
                                double num);

// json boolean
//  """Create JSON boolean.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    boolean (bool): The boolean value to be set.
//    value (EsfJsonValue*): JSON Value ID.
//      NULL is not acceptable.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonValueLimit: JSON Value ID excess error.
//    kEsfJsonOutOfMemory: Memory allocation failure.
EsfJsonErrorCode EsfJsonBooleanInit(EsfJsonHandle handle, bool boolean,
                                    EsfJsonValue* value);

// """Obtains a boolean value from JSON boolean.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    value (EsfJsonValue): JSON Value ID.
//    boolean (bool*): Retrieved boolean value.
//      NULL is not acceptable.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonValueTypeError: JSON type error.
//    kEsfJsonValueNotFound: JSON Value not found.
EsfJsonErrorCode EsfJsonBooleanGet(EsfJsonHandle handle, EsfJsonValue value,
                                   bool* boolean);

// """Set an boolean value to JSON value.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    value (EsfJsonValue): JSON Value ID.
//    boolean (bool): Real value to be set.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonInternalError:  Internal error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonOutOfMemory: Memory allocation failure.
//    kEsfJsonValueNotFound: JSON Value not found.
EsfJsonErrorCode EsfJsonBooleanSet(EsfJsonHandle handle, EsfJsonValue value,
                                   bool boolean);

// json null
//  """Create JSON NULL.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    value (EsfJsonValue*): JSON Value ID.
//      NULL is not acceptable.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonValueLimit: JSON Value ID excess error.
//    kEsfJsonOutOfMemory: Memory allocation failure.
EsfJsonErrorCode EsfJsonNullInit(EsfJsonHandle handle, EsfJsonValue* value);

// """Set an NULL to JSON value.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    value (EsfJsonValue): JSON Value ID.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonInternalError:  Internal error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonOutOfMemory: Memory allocation failure.
//    kEsfJsonValueNotFound: JSON Value not found.
EsfJsonErrorCode EsfJsonNullSet(EsfJsonHandle handle, EsfJsonValue value);

// json value
//  """Copies the specified JSON value to JSON value.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    source (EsfJsonValue): JSON Value ID.
//    destination (EsfJsonValue*): Copied JSON value ID.
//      NULL is not acceptable.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonInvalidArgument: Arg parameter error.
//    kEsfJsonInternalError:  Internal error.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonValueNotFound: JSON Value not found.
//    kEsfJsonValueLimit: JSON Value ID excess error.
//    kEsfJsonOutOfMemory: Memory allocation failure.
EsfJsonErrorCode EsfJsonValueCopy(EsfJsonHandle handle, EsfJsonValue source,
                                  EsfJsonValue* destination);

// """Copies the specified JSON value to JSON value.

// Args:
//    handle (EsfJsonHandle): JSON API Handle.
//      NULL is not acceptable.
//    value (EsfJsonValue): JSON Value ID.
//    type (EsfJsonValueType): JSON Value type.
//      NULL is not acceptable.

// Returns:
//    kEsfJsonSuccess: Normal termination.
//    kEsfJsonHandleError: Handle not yet acquired error.
//    kEsfJsonValueTypeError: JSON type error.
EsfJsonErrorCode EsfJsonValueTypeGet(EsfJsonHandle handle, EsfJsonValue value,
                                     EsfJsonValueType* type);

#ifdef __cplusplus
}
#endif
#endif  // ESF_CODEC_JSON_JSON_H_
